## Code generation to C.
## Generated code is based on ISO/IEC 9899:1999 (also known as C99).

import ropes
import ".."/[envs, typecheck]

type
  CCodeFiles* = tuple
    frpFile, frpHeaderFile, mainFile: string

proc genFrpFile: string =
  var r: Rope

  r.add "#include \"Example.h\"\p\p"

  r.add "void ActivateExample(void) {\p"
  r.add "  int turn = 0;\p"
  r.add "XFRP_LOOP_BEGIN:\p"
  r.add "  /* Get input values */\p"
  r.add "  Input();\p\p"
  r.add "  /* Update nodes by topologically-sorted ordering */\p"
  r.add "  /* Output values */\p"
  r.add "  Output();\p\p"
  r.add "  /* Prepare for the next iteration */\p"
  r.add "  turn ^= 1;\p\p"
  r.add "  goto XFRP_LOOP_BEGIN;\p"
  r.add "}\p"

  result = $r


proc genHeaderFile: string =
  var r: Rope

  r.add "#ifndef EXAMPLE_H\p"
  r.add "#define EXAMPLE_H\p\p"

  r.add "extern void Input(void);\p"
  r.add "extern void Output(void);\p\p"

  r.add "extern void ActivateExample(void);\p"

  r.add "\p#endif\p"

  result = $r


proc genMainFile: string =
  var r: Rope

  r.add "/* Generated by XFRP compiler */\p"

  r.add "#include \"Example.h\"\p\p"

  r.add "void Input(void) {\p  /* Your code goes here ... */\p}\p\p"
  r.add "void Output(void) {\p  /* Your code goes here ... */\p}\p\p"

  r.add "int main(int argc, char *argv[]) {\p"
  r.add "  ActivateExample();\p"
  r.add "  return 0;\p}\p"

  result = $r


proc codegen*(env: XfrpEnv; typeEnv: XfrpTypeEnv): CCodeFiles =
  result.frpFile = genFrpFile()
  result.frpHeaderFile = genHeaderFile()
  result.mainFile = genMainFile()
